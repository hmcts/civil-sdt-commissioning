#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
properties(
        [
                [
                        $class       : 'GithubProjectProperty',
                        projectUrlStr: 'https://github.com/hmcts/civil-sdt-commissioning'
                ],
                pipelineTriggers([[$class: 'GitHubPushTrigger']])
        ]
)
@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "civil"
def component = "sdt-commissioning"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
        'preview' : 'aat',
        'spreview': 'saat'
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {
  overrideVaultEnvironments(vaultOverrides)
  enableAksStagingDeployment()
  syncBranchesWithMaster(branchesToSync)

  env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"

  onPR() {
    echo "Loading PR secrets"
    env.ENV='preview'
  }

  onNonPR() {
    echo "Loading secrets"
    env.ENV='aat'
  }

  afterAlways('akschartsinstall') {

    echo "Just waiting a while to ensure that the pod has run the job"
    sh "sleep 120s"
  }

  afterAlways('sonarscan') {
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "Unit Tests Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/integration",
            reportFiles          : "index.html",
            reportName           : "Integration Test Report"
    ]
  }

  afterAlways('smoketest:preview') {
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('smoketest:aat') {
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
    ]
  }
}
