plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'checkstyle'
  id 'org.sonarqube' version '5.1.0.4882'
  id 'org.springframework.boot' version '2.7.18'
  id 'uk.gov.hmcts.java' version '0.12.65'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.owasp.dependencycheck' version '9.2.0'
  id 'com.github.kt3k.coveralls' version '2.12.2'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.10"
  id 'info.solidsoft.pitest' version '1.15.0' apply(false)
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "org.sonarqube"
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile).configureEach() {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('fortifyScan', JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  toolVersion = '10.23.0'
}

tasks.withType(Checkstyle).configureEach() {
  exclude '**/package-info.java'
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = layout.buildDirectory.file("reports/pmd").get().asFile
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

check.dependsOn jacocoTestReport

pitest {
  junit5PluginVersion = '1.1.2'
  targetClasses.set(['uk.gov.hmcts.reform.sdt.*',
                     'uk.gov.hmcts.reform.sdt.config.*',
                     'uk.gov.hmcts.reform.sdt.controllers.*'])
  excludedClasses.set(['uk.gov.hmcts.reform.sdt.config.OpenAPIConfiguration.class'])
  testSourceSets.set([sourceSets.integrationTest])
  mainSourceSets.set([sourceSets.main])
  useClasspathFile = true
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  threads = 15
  fileExtensionsToFilter.addAll('XML','JSON')
  outputFormats.set(['XML', 'HTML','CSV'])
  mutationThreshold = 0
  coverageThreshold = 0
  jvmArgs.set(['-Xms1G','-Xmx3G'])
  timestampedReports = true
  failWhenNoMutations = false
  detectInlinedCode = true
}

project.tasks['pitest'].group = "Verification"
project.tasks['sonarqube'].group = "Verification"
project.tasks['sonarqube'].dependsOn test,jacocoTestReport


sonarqube {
  properties {
    property "sonar.projectName", "Reform :: civil-sdt-commissioning"
    property "sonar.projectKey", "uk.gov.hmcts.reform:civil-sdt-commissioning"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

ext {
  log4JVersion = '2.24.3'
  lombokVersion = '1.18.24'
  cxfVersion = '3.6.6'
  sdtCommonVersion = '3.2.1'
  testcontainers = '1.17.5'
  tomcatVersion = '9.0.102'
  limits = [
    'instruction': 99,
    'branch'     : 99,
    'line'       : 99,
    'complexity' : 89,
    'method'     : 99,
    'class'      : 90
  ]
}

ext['snakeyaml.version'] = '1.33'
ext['logback.version'] = '1.2.13'

allprojects {
  group 'uk.gov.hmcts.civil.sdt'
  version '0.0.1-SNAPSHOT'

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url  "https://jitpack.io"
    }
    flatDir {
      dirs "$rootProject.projectDir/libs"
    }
  }

  apply plugin: 'java'

  dependencies {
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
    implementation 'com.sun.xml.bind:jaxb-core:4.0.5'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.5'

    implementation group: 'io.rest-assured', name: 'rest-assured'
    implementation group: 'com.github.hmcts', name: 'civil-sdt-common', version: sdtCommonVersion
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'

    implementation group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-features-logging', version: cxfVersion
    implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'
    implementation group: 'com.sun.xml.ws', name: 'jaxws-ri', version: '3.0.2'

    testImplementation(platform('org.junit:junit-bom:5.12.1'))
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
      exclude group: 'junit', module: 'junit'
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'com.github.hmcts:fortify-client:1.4.8:all'
    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'utils', version: sdtCommonVersion, classifier: 'test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'domain', version: sdtCommonVersion, classifier: 'test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'producers-api', version: sdtCommonVersion, classifier: 'test'
  }

  configurations.configureEach {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'org.apache.tomcat.embed') {
          details.useVersion tomcatVersion
        }
      }
    }
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }

  tasks.withType(Copy).configureEach {
    duplicatesStrategy 'exclude'
  }
}

mainClassName = 'uk.gov.hmcts.reform.sdt.Application'

bootJar {
  archiveFileName = "civil-sdt-commissioning.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

tasks.withType(Jar).configureEach {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distZip {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

dependencies {
  implementation project(':producers-commissioning')
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: "org.sonarqube"
  apply plugin: 'info.solidsoft.pitest'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'jacoco'

  bootJar {
    enabled = false
  }

  jar {
    enabled = true
    archiveClassifier = ''
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
      exceptionFormat = 'full'
    }
  }

  sonarqube {
    skipProject = true
  }

  dependencyCheck {
    suppressionFile = "${rootDir}/config/owasp/suppressions.xml"
  }
  configurations.configureEach {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'org.apache.tomcat.embed') {
          details.useVersion tomcatVersion
        }
      }
    }
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }
  configurations {
    configureEach {
      exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
  }

  // from https://github.com/junit-team/junit5/issues/1024'
  afterEvaluate {
    jacocoTestReport {
      reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.required = true
        html.required = true
      }

      classDirectories.setFrom((classDirectories.files.collect {
        fileTree(dir: it)
      }))

      doLast {
        def report = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
          def covered = it.'@covered' as Double
          def missed = it.'@missed' as Double
          ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        metrics.each {
          def limit = limits[it.key]
          if (it.value < limit) {
            failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
          }
        }

        if (failures) {
          logger.quiet("------------------ Code Coverage Failed -----------------------")
          failures.each {
            logger.quiet(it)
          }
          logger.quiet("---------------------------------------------------------------")
          throw new GradleException("Code coverage failed")
        } else{
          logger.quiet("Passed Code Coverage Checks")
        }
      }
    }
  }

  jacocoTestReport.dependsOn compileJava, processResources
  check.dependsOn jacocoTestReport
}
