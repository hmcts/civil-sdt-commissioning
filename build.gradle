plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'checkstyle'
  id 'org.sonarqube' version '3.4.0.2513'
  id 'org.springframework.boot' version '2.7.9'
  id 'uk.gov.hmcts.java' version '0.12.27'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.owasp.dependencycheck' version '8.0.2'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id 'com.github.ben-manes.versions' version '0.45.0'
  id "org.jetbrains.gradle.plugin.idea-ext" version "0.7"
  id 'info.solidsoft.pitest' version '1.9.11' apply(false)
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "org.sonarqube"
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {

  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += test.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += test.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile).configureEach() {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}


tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('fortifyScan', JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  toolVersion = '10.7.0'
}

tasks.withType(Checkstyle).configureEach() {
  exclude '**/package-info.java'
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

pitest {
  junit5PluginVersion = '1.1.2'
  targetClasses.set(['uk.gov.hmcts.reform.sdt.*',
                     'uk.gov.hmcts.reform.sdt.config.*',
                     'uk.gov.hmcts.reform.sdt.controllers.*'])
  excludedClasses.set(['uk.gov.hmcts.reform.sdt.config.OpenAPIConfiguration.class'])
  testSourceSets.set([sourceSets.integrationTest])
  mainSourceSets.set([sourceSets.main])
  useClasspathFile = true
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  threads = 15
  fileExtensionsToFilter.addAll('XML','JSON')
  outputFormats.set(['XML', 'HTML','CSV'])
  mutationThreshold = 0
  coverageThreshold = 0
  jvmArgs.set(['-Xms1G','-Xmx3G'])
  timestampedReports = true
  failWhenNoMutations = false
  detectInlinedCode = true
}

project.tasks['pitest'].group = "Verification"
project.tasks['sonarqube'].group = "Verification"
project.tasks['sonarqube'].dependsOn test,jacocoTestReport


sonarqube {
  properties {
    property "sonar.projectName", "Reform :: civil-sdt-commissioning"
    property "sonar.projectKey", "uk.gov.hmcts.reform:civil-sdt-commissioning"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

ext {
  log4JVersion = '2.20.0'
  lombokVersion = '1.18.24'
  cxfVersion = '3.5.5'
  postgresqlVersion = '42.5.1'
  sdtCommonVersion = '1.0.0-SDT-105.1.0'
  testcontainers = '1.17.5'
}

ext['snakeyaml.version'] = '1.33'

allprojects {
  group 'uk.gov.hmcts.civil.sdt'
  version '0.0.1-SNAPSHOT'

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url  "https://jitpack.io"
    }
    flatDir {
      dirs "$rootProject.projectDir/libs"
    }
  }

  apply plugin: 'java'

  dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4JVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: log4JVersion
    implementation 'com.sun.xml.bind:jaxb-core:4.0.2'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.2'

    implementation group: 'io.rest-assured', name: 'rest-assured'
    implementation group: 'com.github.hmcts', name: 'civil-sdt-common', version: sdtCommonVersion
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    implementation group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-features-logging', version: cxfVersion
    implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'

    testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainers
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
      exclude group: 'junit', module: 'junit'
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'com.github.hmcts:fortify-client:1.2.2:all'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'utils', version: sdtCommonVersion, classifier: 'test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'utils', version: sdtCommonVersion, classifier: 'integ-test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'domain', version: sdtCommonVersion, classifier: 'test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'producers-api', version: sdtCommonVersion, classifier: 'test'
  }

  configurations.configureEach {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.github.ben-manes.caffeine' && details.requested.name == 'caffeine') {
          details.useVersion '2.8.5'
        }
        if (details.requested.group == 'org.apache.tomcat.embed') {
          details.useVersion '9.0.74' // CVE-2023-28709
        }
        if (details.requested.group == 'org.springframework') {
          details.useVersion '5.3.27' // CVE-2023-20861
        }
        if (details.requested.group == 'org.springframework.boot') {
          details.useVersion '2.7.11' // CVE-2023-20873
        }
        if (details.requested.group == 'com.fasterxml.woodstox' && details.requested.name == 'woodstox-core') {
          details.useVersion '6.4.0' // CVE-2022-40152
        }
        if (details.requested.group == 'org.eclipse.jetty') {
          details.useVersion '9.4.51.v20230217' // CVE-2023-26049
        }
      }
    }
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }

  tasks.withType(Copy).configureEach {
    duplicatesStrategy 'exclude'
  }

}

mainClassName = 'uk.gov.hmcts.reform.sdt.Application'

bootJar {
  archiveFileName = "civil-sdt-commissioning.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

tasks.withType(Jar).configureEach {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distZip {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: "org.sonarqube"
  apply plugin: 'info.solidsoft.pitest'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'com.github.ben-manes.versions'

  configurations {
    testUnitImplementation.extendsFrom testImplementation
    testUnitImplementation.extendsFrom runtimeOnly

    testIntegrationImplementation.extendsFrom testImplementation
    testIntegrationImplementation.extendsFrom runtimeOnly
  }

  bootJar {
    enabled = false
  }

  jar {
    enabled = true
    archiveClassifier = ''
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform()
    reports.html.enabled = false

    testLogging {
      exceptionFormat = 'full'
    }
  }

  sonarqube {
    skipProject = true
  }

  dependencyCheck {
    suppressionFile = "${rootDir}/config/owasp/suppressions.xml"
  }
  configurations.configureEach {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.github.ben-manes.caffeine' && details.requested.name == 'caffeine') {
          details.useVersion '2.8.5'
        }
        if (details.requested.group == 'org.apache.tomcat.embed') {
          details.useVersion '9.0.74' // CVE-2023-28709
        }
        if (details.requested.group == 'org.springframework') {
          details.useVersion '5.3.27' // CVE-2023-20861
        }
        if (details.requested.group == 'org.springframework.boot') {
          details.useVersion '2.7.11' // CVE-2023-20873
        }
        if (details.requested.group == 'com.fasterxml.woodstox' && details.requested.name == 'woodstox-core') {
          details.useVersion '6.4.0' // CVE-2022-40152
        }
        if (details.requested.group == 'org.eclipse.jetty') {
          details.useVersion '9.4.51.v20230217' // CVE-2023-26049
        }
      }
    }
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }
  configurations {
    configureEach {
      exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
  }
}
